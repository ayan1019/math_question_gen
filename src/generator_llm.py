# src/generator_llm.py
from pathlib import Path
import datetime
from llm_client import generate_questions_from_prompt
from question_model import parse_output_format
from image_utils import draw_packed_balls, draw_uniform_table
from docx_exporter import export_questions_to_docx

# --- 1) Base questions from PDF
BASE_QUESTIONS = """
Base Question 1:
Each student at Central Middle School wears a uniform consisting of 1 shirt and 1 pair of pants.
The table shows the colors available for each item of clothing.
Shirt Color: Tan, Red, White, Yellow
Pants Color: Black, Khaki, Navy

Base Question 2:
The top view of a rectangular package of 6 tightly packed balls is shown.
If each ball has a radius of 2 centimeters, which of the following are closest to the dimensions, in centimeters, of the rectangular package?
Options: 2x3x6, 4x6x6, 2x4x6, 4x8x12, 6x8x12
"""

# --- 2) Curriculum categories (from PDF)
CURRICULUM_CATEGORIES = [
    ("Quantitative Math", "Data Analysis & Probability", "Counting & Arrangement Problems"),
    ("Quantitative Math", "Data Analysis & Probability", "Probability with Replacement & Without Replacement"),
    ("Quantitative Math", "Geometry and Measurement", "Circles (Area, circumference)"),
    ("Quantitative Math", "Geometry and Measurement", "Volume & Surface Area"),
    ("Quantitative Math", "Number & Operations", "Fractions & Decimals"),
    ("Logical Reasoning", "Analytical Reasoning", "Pattern Recognition"),
    ("Logical Reasoning", "Analytical Reasoning", "Series Completion"),
    ("Logical Reasoning", "Deductive Reasoning", "Syllogisms"),
    ("Verbal Reasoning", "Vocabulary", "Synonyms & Antonyms"),
    ("Verbal Reasoning", "Reading Comprehension", "Inference Questions")
]

# Create a map: {order: (subject, unit, topic)}
CURRICULUM_MAP = {i + 1: CURRICULUM_CATEGORIES[i] for i in range(len(CURRICULUM_CATEGORIES))}

# --- 3) LLM prompt template
PROMPT_TEMPLATE = f"""
You are given two base math questions (see below). 
Using these as inspiration, create TEN NEW distinct multiple-choice questions.

Coverage requirement:
- Produce EXACTLY one question from each of the following 10 curriculum categories (in order):
{''.join([f"{i+1}) Subject: {s}, Unit: {u}, Topic: {t}\n" for i,(s,u,t) in enumerate(CURRICULUM_CATEGORIES)])}

Output format rules:
1) Use the EXACT 'Question Output Format':
@question <question text>
@instruction <instruction>
@difficulty <easy|moderate|hard>
@Order <number>

@option <option text>
@option <option text>
@@option <correct option text>
@option <option text>

@explanation
<explanation text>
@subject <curriculum subject>
@unit <unit from curriculum>
@topic <topic from curriculum>
@plusmarks 1

2) Preserve LaTeX for math expressions.
3) If a question requires an image, add: @image <tag> at the end of the question block (one word tag, e.g. packing_topview, uniform_table).
4) Ensure the Order numbers go from 1 to 10.
5) Do not include any extra commentary or text outside the blocks.

Base questions:
---
{BASE_QUESTIONS}
"""

# --- 4) Main runner
def run(output_dir="output"):
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)

    print("Sending prompt to LLM...")
    llm_text = generate_questions_from_prompt(PROMPT_TEMPLATE)

    # Save raw LLM output
    raw_path = output_dir / "llm_raw_response.txt"
    raw_path.write_text(llm_text, encoding="utf-8")
    print(f"LLM raw output saved to {raw_path}")

    # Parse LLM output with enforced curriculum tags
    parsed = parse_output_format(llm_text, curriculum_map=CURRICULUM_MAP)
    title = parsed.get("title") or "Generated Math Assessment"
    description = parsed.get("description") or "Auto-generated by LLM."
    questions = parsed["questions"]

    # Markdown export
    md_lines = [f"@title {title}", f"@description {description}", ""]
    for q in questions:
        md_lines.append(q.to_output_block())
        md_lines.append("")
        if q.image_tag:
            img_file = output_dir / f"{q.image_tag}.png"
            if q.image_tag.lower().startswith("packing"):
                draw_packed_balls(rows=2, cols=3, radius_cm=2, out_path=str(img_file))
            elif q.image_tag.lower().startswith("uniform"):
                draw_uniform_table(["Tan", "Red", "White", "Yellow"], ["Black", "Khaki", "Navy"], str(img_file))
            else:
                draw_packed_balls(rows=2, cols=3, radius_cm=2, out_path=str(img_file))
            md_lines.append(f"Image: {img_file.name}")

    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    md_path = output_dir / f"Generated_Questions_{timestamp}.md"
    md_path.write_text("\n".join(md_lines), encoding="utf-8")
    print(f"Markdown saved to {md_path}")

    # DOCX export
    docx_path = output_dir / f"Generated_Questions_{timestamp}.docx"
    export_questions_to_docx(title, description, questions, str(docx_path))
    print(f"DOCX saved to {docx_path}")

if __name__ == "__main__":
    run()
